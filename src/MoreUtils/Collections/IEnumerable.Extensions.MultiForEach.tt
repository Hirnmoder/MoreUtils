<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
/**
 * This code was generated by a tool.
 * Any changes made to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

using System;
using System.Collections.Generic;

namespace MoreUtils.Collections
{
    public static partial class IEnumerableExtensions
    {
<#
        for(int i = 2; i <= 16; i++)
        {
            printMultiForEach(i);
        }
#>
    }
}

<#
void printMultiForEach(int count)
{
    var types = new string[count];
    var sources = new string[count];
    var enumerators = new string[count];
    for(int i = 0; i < count; i++)
    {
        types[i] = "T" + (i + 1).ToString();
        sources[i] = "source" + (i + 1).ToString();
        enumerators[i] = "e" + (i + 1).ToString();
    }
#>

        /// <summary>
        /// Performs the specified <paramref name="action"/> on each <#= count #>-tuple of elements from <paramref name="source"/>.
        /// </summary>
        /// <param name="tuple">Multiple <see cref="IEnumerable{T}"/>s to loop through together.</param>
        /// <param name="action">A <see cref="Action{<# Write(string.Join(",", types)); #>}"/> delegate to perform on each <#= count #> elements of <paramref name="tuple"/>.</param>
        public static void ForEach<<# Write(string.Join(", ", types)); #>>(this (<#
        Write(string.Join(", ", sources.Select((s, i) => "IEnumerable<T" + (i+1).ToString() + "> " + s)));
        #>) tuple, Action<<#
        Write(string.Join(", ", types));
        #>> action)
        {
<#

            for(int i = 0; i < count; i++)
            {
#>
            var <#= enumerators[i] #> = tuple.source<#= i + 1 #>.GetEnumerator();
<#
            }
#>
            while(<# Write(string.Join(" && ", enumerators.Select(e => e + ".MoveNext()"))); #>)
            {
                action(<# Write(string.Join(", ", enumerators.Select(e => e + ".Current"))); #>);
            }
        }
<#
}
#>